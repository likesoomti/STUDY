# Methods,Blocks & Sorting 



## 1. Why Methods?

메서드는 프로그램에서 코드를 재사용가능하게 쓸수있도록 만든 하나의 특수한 기능입니다. 

코드에서 메서드를 왜 분리해서 만드는지 궁금해할수있지만, 크게 가지고 다니는것보다, 나눠서 만드는 것에 여러 장점이 존재합니다.

1. 만약 내 코드가 잘못되었는데, 여러곳에 같은 코드가있을경우 그걸 하나하나 고쳐야 합니다. 메서드는 이런 복잡함을 줄여줍니다.
2. 특수하게 코드를 분리함으로서, 같은 코드를 재반복해서 쓰지 않아도 되는 편리함이 존재합니다. 시간도 절약되고, 다른 프로젝트에 메서드를 갖다 쓸 수 있습니다.

객체를 배우게 되면, 루비에 다양한 메서드를 확인할 수 있습니다! 일단 메서드에 대해서 알아봅시다.



## 2. Method Syntax

메서드는 `define` 의 약자인 `def` 로 만듭니다.

메서드는 3가지만 기억하면 됩니다.

1. `header` :  `def`, `메서드이름` , `argument` 을 포함합니다.

2. `body` : 메서드 안에 내용은 메서드가 실행해야 할 내용을 적습니다. 내용은 무조건 2칸 들여쓰기를 해야합니다. 

3. `end` : 메서드의 끝은 `end` 키워드로 닫습니다.

   sample.rb

   ```ruby
   def welcome
     puts "welcome to ruby!"
   end
   
   def puts_1_to_10
     (1..10).each { |i| puts i }
   end
   
   puts_1_to_10 # Ignore this for now. We'll explain it soon!
   ###
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   ```

   

## 3. Create Your Own

메서드 만들어봅시다.

```ruby
# Define your method below!
def greeting
  puts "hello"
end

# Define your method above this line.

greeting # Ignore this for now. We'll explain
         # it in the next exercise!
###
hello
```



## 4. Call It!

메서드를 사용하는건 좋은 생각이지만, 만약에 호출할 일이 적다면 그냥 내 프로그램에 코드를 적는게 좋을수도 있습니다.

예를들어, 없는 메서드인 `cartoon_fox` 를 호출하면, 프로그램은 그 메서드에 해당하는 메서드를 찾고, 그 메서드 안에서 실행하지만, 만약에 메서드가 없다면 `NameError` 를 반환합니다. 이 에러에 대한 대책은 나중에 설명하겠습니다. 

메서드를 호출하기위해서는 해당 메서드의 이름을 적으면 됩니다. 

```ruby
def array_of_10
  puts (1..10).to_a
end

array_of_10
```



## 5. Parameters and Arguments

메서드는 argument = 인자 를 가질 수 있습니다. argument 는 메서드 이름 뒤에 `()`를 통해 받을 수 있습니다.

```ruby
def square(n)
  puts n ** 2
end
```

그리고 `argument` 가 있는 메서드는 뒤에 `()` 안에 또한 전달할 숫자를 넘겨줄 수 있습니다.

```ruby
square(12)
# ==> prints "144"
```

 `argument`는  실제로 메서드를 호출할 때 , 우리가 값을 전달해야되는 경우도 존재합니다. 위 코드 `square` 을 정의하면, 우리는 `n`을 줄 값을 포함해 메서드를 호출합니다. 그러면 값 12가 메서드에넘어가 144가 호출 됩니다.

루비에서는 메서드의 괄호가 선택사항이지만, 가독성을 위해 넣어주는것이 좋습니다. 

```ruby
def cubertino(n)
  puts n ** 3
end
cubertino(8)
```



## 6. Splat!

만약, 친구 이름을 출력하는 메서드를 만들경우, 인자는 유저를 통해 받습니다. 

```ruby
def friend(name):
  puts "My friend is " + name + "."
end
```

하나의 친구를 호출할 경우는 좋겠지만, 여러 친구들을 호출할때 많은 메서드를 호출하는 방법이생깁니다.

이런 경우 **splat** argument 를 사용합니다.

**Splat** 는 argument 를 * 로 지정하는 것을 말하는데요. 이렇게 지정하면 메서드는 여러개의 값을 가진 배열/또는 해시가 들어올 수 있습니다.

```ruby
def what_up(greeting, *friends)
  friends.each { |friend| puts "#{greeting}, #{friend}!" }
end

what_up("What up", "Ian", "Zoe", "Zenas", "Eleanor")
```

위에서는 `*friends`가 splat 입니다.



## 7. Let's Learn Return

때때로 메서드를 사용하다보면 프린트하는 것 뿐만아니라, 실제로 값을 전달받아야 할 경우가있습니다.

이럴때  `return`를 사용합니다.

예시를 봅시다. 

```ruby
def double(n)
  return n * 2
end

output = double(6)
output += 2
puts output
```

1. 예시를 보면 인자 하나를 받는  `double` 메서드가 정의되어 있습니다.
2. 메서드 안에는 받은 인자를 곱해서 리턴해주는 문장이있습니다.
3. 만약 double 에 값을 넣어 호출하면, 그해 해당하는 결과 값을 전달해줍니다.
4. 그 값을 다른 변수에 저장할 수 있습니다.

출력문은 저장할 수 있는 값이 아니지만, 타입형으로 반환되는 값은 전달될 수 있으므로, return 이 됩니다. 

```ruby
def add(n1,n2)
  return n1+n2
end

sum = add(2,5)
```



## 8. Practice Makes Perfect

연습 코드.

```ruby
def by_five?(n)
  return n % 5 == 0
end
def greeter(name)
  return "hi #{name}"
end

greeter("soomin")

def by_three?(n)
  if(n%3==0)
    return true
  else
    return false
  end
end

by_three?(3)
```



## 9. Blocks Are Like Nameless Methods

대부분 메서드들은 이름을 정의하고, 그 이름을 통해 갖다씁니다. 

`block` 은 이름이 필요없는 메서드입니다. 자바스크립트의 익명함수나, 파이썬의 람다와 비슷합니다. 

`block` 은 `do` 와 `end` 또는 `{}` 로 정의합니다.

```ruby
1.times do
  puts "I'm a code block!"
end

1.times { puts "As am I!" }
```





## 10. How Blocks Differ from Methods

메서드랑 블록의 차이

1. capitalizes 메서드는 단어들의 첫 문자를 대문자로 바꿔줍니다. 계속해서 재사용이 가능합니다.
2. 블록은 `.each` 처럼 한번만 호출됩니다. 한번만 실행되고 사라집니다.



## 11.Using Code Blocks

메서드는 블록을 매개변수로 사용할 수 있습니다. 

우리가 제어문을 사용할 때, .each 문에 블록을 매개변수로 전달받았었습니다. 괄호가 생략되어 매개변수인지 몰랐지만, 블록을 매개변수로 넣은 것 입니다. 

```ruby
[1, 2, 3, 4, 5].each { |i| puts i }
```

추상화는 컴퓨터 사이언스에서 가장 중요한 관념입니다. 그리고 이것은 "더욱 간단하게"의 의미를 담고 있습니다. 



## 12. Introduction to Sorting

배열을 정렬하는것은 컴퓨터 사이언스에서 흔한 문제고, 우리가 공부하는 이유입니다. 정렬을 하기 위한 많은 알고리즘이 있습니다. 

정렬알고리즘은 컴퓨터 사이언스를의 이론을 훈련하기 위한 좋은 방법이지만, 우리는 루비에 설치된 정렬 알고리즘을 어떻게 사용하는지 알아봅시다. 

```ruby
my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]

# Call the sort! method on my_array below.
# my_array should then equal [1, 2, 3, 4, 5, 6, 7, 8, 9].
my_array.sort!
puts my_array
```



## 13. Foundations

만약 우리가 5개 책을 정리해야한다면 , 제목으로? 연도별로? 어떻게 정렬해야할까요

대부분 정렬 알고리즘은 두개의 아이템을 비교하여 정렬합니다.

위에 들은 책의 예시 경우, title 일 경우 알파벳을 기준으로 정렬합니다. 

```ruby
# library sorting code
books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]

# How might we sort! the books in alphabetical order? (Hint, hint)
books.sort!
puts books
```



## 16. The Combined Comparison Operator

우리는 비교될 루비의 두개의 객체를 새로운 연산을 통해 정렬할 수 있습니다. 

`<=>` 비교연산자 

첫번째 값이 두번째 값과 같다면,  `0`을 리턴합니다.

첫번째 값이 두번째 값보다 크다면, `1`을 리턴합니다.

첫번째 값이 두번째 값보다 작다면, `-1` 을 리턴합니다. 

```ruby
book_1 = "A Wrinkle in Time"

book_2 = "A Brief History of Time"

puts book_1 <=> book_2
### 
1
```



## 17. Getting Technical

책을 `title` `Z~A` 로 정렬하길 원한다면 어떻게 해야할까요? 루비는 `A-Z` 로 제공합니다. 

`sort` 메서드는 보통 오름차순으로 정렬되는데, 내림차순으로 정려하고 싶을 경우 `<=>` 를 사용할 수 있습니다. 

1,0,-1 순서대로 값이 정렬됩니다.



## 16~19. Basic Methods

```ruby
# 16
def welcome
  puts "Welcome to Ruby!"
end

welcome

# 17
def welcome(name)
  return "Hello, #{name}"
end

welcome("soomin")

# 18
my_array = [1, 2, 3, 4, 5]

my_array.each { |i|
  puts i*i
}

# 19
fruits = ["orange", "apple", "banana", "pear", "grapes"]

fruits.sort! do |f,b|
  b<=>f
end

puts fruits
```





## What You'll Be Building

We noticed in the last lesson that `.sort!`didn't have a built-in way of handling sorting in reverse alphabetical order. Now that we know how to write our own Ruby methods, we can fix that!

- 메서드 만들기

  ```ruby
  def alphabetize
  end
  ```

- 매개변수 넣기

  루비는 매개변수에 값을 넣지 않았을경우,설정값을 지정할 수 있습니다.

  ```ruby
  def alphabetize(arr,rev=false)
  end
  ```

- 배열 정렬하기

  ```ruby
  def alphabetize(arr,rev=false)
    return arr.sort!
  end
  
  numbers = [5, 1, 3, 8]
  
  puts alphabetize(numbers)
  ```

- 분기를 통해 다른 정렬 설정하기

  ```ruby
  def alphabetize(arr,rev=false)
    arr.sort!
    if rev
      arr.reverse!
    end
    return arr
  
  end
  
  numbers = [5, 1, 3, 8]
  
  puts alphabetize(numbers)
  ```

  



# h1

## h2

### h3

내용ㅇ 

ㅎ하항

# 제목입니다

- 
- 항ㅁㅎㅁㄴㅎㅇ
- 하히
- ㅏ

